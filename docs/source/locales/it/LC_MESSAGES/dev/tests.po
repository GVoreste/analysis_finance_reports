# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Oreste Sciacqualegni
# This file is distributed under the same license as the freeports_analysis
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: freeports_analysis\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-18 13:01+0200\n"
"PO-Revision-Date: 2025-07-20 14:39+0200\n"
"Last-Translator: \n"
"Language-Team: it <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.17.0\n"
"X-Generator: Poedit 3.6\n"

#: ../../source/dev/tests.rst:3
msgid "Creating tests"
msgstr "Creazione dei test"

#: ../../source/dev/tests.rst:5
msgid ""
"The tests are developed using `pytest <https://docs.pytest.org/en/stable/>`_ "
"and they are located in the ``tests/`` directory. This guide will forcus on "
"the development of the tests related to the creation of a format. In order to "
"make a test there are three steps:"
msgstr ""
"I test sono sviluppati usando `pytest <https://docs.pytest.org/en/stable/>`_  "
"e sono messi nella cartella ``tests/``. Questa guida si concentra sullo "
"sviluppo dei test in relazione alla creazione di un formato. Per creare un "
"test ci sono 3 diversi passaggi:"

#: ../../source/dev/tests.rst:8
#, python-brace-format
msgid ""
"create the test file in the ``tests/formats/`` directory. It has to be called "
"``test_{format name}.py``"
msgstr ""
"creare il file di test nella cartella ``tests/formats/`` . Deve essere "
"chiamato ``test_{format name}.py``"

#: ../../source/dev/tests.rst:9
#, python-brace-format
msgid ""
"create the dataset to test and with validated results into ``tests/data/"
"{FORMAT NAME}/``"
msgstr ""
"creare un dataset da testare e con il quale validare i risultati e metterlo in "
"``tests/data/{FORMAT NAME}/``"

#: ../../source/dev/tests.rst:10
msgid "activate the relevant single page tests in the ``tests/conftest.py`` file"
msgstr ""
"attivare i test di pagina singola rilevanti nel file ``tests/conftest.py``"

#: ../../source/dev/tests.rst:15
msgid "Test file"
msgstr "File di test"

#: ../../source/dev/tests.rst:17
msgid ""
"You can take as reference any test file for the others formats. As you can see "
"usually there are four tests:"
msgstr ""
"Puoi prendere come esempio qualunque altro test per gli altri formati. Come "
"puoi vedere ci sono quattro test:"

#: ../../source/dev/tests.rst:19
msgid "``PdfFilter`` single page"
msgstr "pagina singola ``PdfFilter``"

#: ../../source/dev/tests.rst:20
msgid "``TextExtract`` single page"
msgstr "pagina singola ``TextExtract``"

#: ../../source/dev/tests.rst:21
msgid "``Deserialize`` single page"
msgstr "pagina singola ``Deserialize``"

#: ../../source/dev/tests.rst:22
msgid "``pipeline``"
msgstr "``pipeline``"

#: ../../source/dev/tests.rst:24
msgid ""
"The first three are parametrized tests on a single page of a pdf report that "
"usually behave in the same manner and call an utility to test in a "
"standardized way. The last one is marked as ``integration_tests`` (because it "
"is slow) and it is not run after each commit but only in the CI pipeline upon "
"push on ``dev`` or ``main`` remote branches (or by the user launching "
"``pytest`` command without any option). This test is run on an entire document "
"and check on the output ``csv``."
msgstr ""
"I primi tre sono test parametrizzati su una singola pagina di un report pdf e "
"di solito sono strutturati allo stesso modo e chiamano una funzione di aiuto "
"per effettuare il test in modo standardizzato. L'ultimo è segnato come "
"``integration_tests`` (questo perché è di lenta esecuzione) e non è lanciato "
"dopo ogni commit ma solo nella CI pipeline come risposta a una integrazione o "
"modifica ai rami remoti ``dev`` o ``main`` (o lanciando il comando ``pytest`` "
"senza alcuna opzione). Questo test è lanciato su un intero documento ed è "
"validato sul ``csv`` in output."

#: ../../source/dev/tests.rst:30
msgid ""
"It is not mandatory to test and provide single page tests or pipeline test for "
"all three functions if some of them are not defined or not working."
msgstr ""
"Non è necessario testare e fornire test di pagina singola o di pipeline per "
"tutte e tre le funzioni se alcune di queste non sono definite o funzionanti."

#: ../../source/dev/tests.rst:35
msgid "Test dataset"
msgstr "Dataset di test"

#: ../../source/dev/tests.rst:37
#, python-brace-format
msgid ""
"The dataset to assert the validity of tests and to recreate them consists in "
"different files placed in ``tests/data/{FORMAT NAME}/``. One document pdf "
"named ``report.pdf`` has to be present to validate the ``PdfFilter`` function "
"and for the integration test. In order to check the results of the pipeline "
"test has to be present a csv file named ``out.csv``. All the other file are "
"used for validating and generating the results of the single page tests for "
"``PdfFilter``, ``TextExtract`` and ``Deserialize`` functions. The files are "
"named respectively ``pdf_blks-{page number}.pkl``, ``txt_blks-{page "
"number}.pkl`` and ``financial_data-{page number}.pkl`` and are direct dump of "
"the object generated calling the different functions on a specific ``xml "
"tree`` (page of the document). These files are `pickle files <https://"
"docs.python.org/3/library/pickle.html>`_ containing respectively a list of "
"``PdfBlocks``, ``TextBlocks`` and ``FinancialData``. To generate these files "
"is present some utility functions in the ``devtools/make_tests.py`` file."
msgstr ""
"Il dataset per determinare la validità dei test e per ricrearli, consiste in "
"diversi file localizzati in ``tests/data/{FORMAT NAME}/``. Per poter validare "
"la funzione ``PdfFilter`` o per effettuare il test di integrazione dell'intero "
"documento deve essere presente un documento pdf chiamato ``report.pdf``. Per "
"poter controllare i risultati del test di pipeline deve essere presente un "
"file csv chiamato ``out.csv``. Tutti gli altri file sono usati per la "
"validazione e per la generazione dei risultati dei test di pagina singola per "
"le funzioni ``PdfFilter``, ``TextExtract`` e ``Deserialize``. Questi file sono "
"chiamati rispettivamente ``pdf_blks-{page number}.pkl``, ``txt_blks-{page "
"number}.pkl`` e ``financial_data-{page number}.pkl`` e sono dump diretti degli "
"oggetti creati creati alla chiamata delle differenti funzioni su uno specifico "
"``albero xml`` (pagina del documento). Questi ile sono `file pickle <https://"
"docs.python.org/3/library/pickle.html>`_ contenenti rispettivamente una lista "
"di ``PdfBlocks``, ``TextBlocks`` and ``FinancialData``. Per generare questi "
"file è presente una funzione di aiuto nel file ``devtools/make_tests.py``."

#: ../../source/dev/tests.rst:50
msgid "Activate single page tests"
msgstr "Attivazione del test di pagina singola"

#: ../../source/dev/tests.rst:52
msgid ""
"The dataset referring a format can contain a variable number of single page "
"tests to be performed. In not specified no test is performed, even if the "
"dataset contains the required data. To activate it is necessary to modify the "
"``tests/conftest.py`` file adding to the ``single_page_tests`` array a key "
"with the format name in capslock and the list of the pages to test."
msgstr ""
"Il dataset riferito ad un formato può contenere un numero variabile di test a "
"singola pagina da effettuare. Se non specificato altrimenti non è effettuato "
"alcun test, anche se il dataset contiene i dati necessari per eseguirlo. Per "
"attivarli è necessario modificare il file ``tests/conftest.py`` aggiungendo "
"alla lista ``single_page_tests`` una chiave con il nome del formato tutto "
"maiuscolo e l'elenco delle pagine da testare."
