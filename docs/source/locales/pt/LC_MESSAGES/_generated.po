# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Oreste Sciacqualegni
# This file is distributed under the same license as the freeports_analysis
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: freeports_analysis \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-09 01:59+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt\n"
"Language-Team: pt <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/_generated/freeports_analysis.rst:2
msgid "freeports\\_analysis"
msgstr ""

#: freeports_analysis:1 of
msgid "Freeports analysis package."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:31
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:15
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:23
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.rst:18
#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:22
#: ../../source/_generated/freeports_analysis.rst:9
msgid "Modules"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ":py:obj:`cmd <freeports_analysis.cmd>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
#: freeports_analysis.cmd:1 of
msgid ""
"Contains all the functions related to command line use of the `freeport` "
"script"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ":py:obj:`conf_parse <freeports_analysis.conf_parse>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
#: freeports_analysis.conf_parse:1 of
msgid ""
"Submodule containing all the utilities for validating and parsing the "
"configuration"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ":py:obj:`consts <freeports_analysis.consts>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
#: freeports_analysis.consts:1 of
msgid ""
"Provide basic constant and types used by all submodules, should "
"facilitate avoiding circular imports"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ":py:obj:`download <freeports_analysis.download>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
#: freeports_analysis.download:1 of
msgid "Functions to download pdf from internet and for scraping"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ":py:obj:`formats <freeports_analysis.formats>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
#: freeports_analysis.formats:1 of
msgid ""
"Module common to each format, it contains the definitions used by all the"
" formats"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ":py:obj:`formats_utils <freeports_analysis.formats_utils>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
#: freeports_analysis.formats_utils:1 of
msgid ""
"Utilities of general interest common to all formats and that can be used "
"for creating `pdf_filter` or `text_extract` or `deserialize` functions"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ":py:obj:`main <freeports_analysis.main>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.rst:20:<autosummary>:1
msgid ""
"This module is the one that contains the function called in order to "
"decode the information from the pdf and to save the `csv` file."
msgstr ""

#: ../../source/_generated/freeports_analysis.cmd.rst:2
msgid "freeports\\_analysis.cmd"
msgstr ""

#: ../../source/_generated/freeports_analysis.cmd.rst:9
#: ../../source/_generated/freeports_analysis.conf_parse.rst:9
#: ../../source/_generated/freeports_analysis.download.rst:9
#: ../../source/_generated/freeports_analysis.formats.anima.rst:9
#: ../../source/_generated/freeports_analysis.formats.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.deserialize.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_font.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_position.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.font.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.position.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.match.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:9
#: ../../source/_generated/freeports_analysis.main.rst:9
msgid "Functions"
msgstr ""

#: freeports_analysis.cmd.cmd:1:<autosummary>:1 of
msgid ":py:obj:`cmd <freeports_analysis.cmd.cmd>`\\ \\(\\)"
msgstr ""

#: freeports_analysis.cmd.cmd:1 freeports_analysis.cmd.cmd:1:<autosummary>:1 of
msgid ""
"Command called when launching `freeports` from terminal, it calls the "
"`main` function."
msgstr ""

#: freeports_analysis.cmd.cmd:1:<autosummary>:1 of
msgid ""
":py:obj:`overwrite_with_args "
"<freeports_analysis.cmd.overwrite_with_args>`\\ \\(args\\, config\\, "
"...\\)"
msgstr ""

#: freeports_analysis.cmd.cmd:1:<autosummary>:1
#: freeports_analysis.cmd.overwrite_with_args:1 of
msgid ""
"Overwrite configuration provided and update the dictionary containing "
"from where the configuration are loaded from accordingly, using command "
"line arguments"
msgstr ""

#: ../../source/_generated/freeports_analysis.cmd.rst
#: ../../source/_generated/freeports_analysis.conf_parse.rst
#: ../../source/_generated/freeports_analysis.download.rst
#: ../../source/_generated/freeports_analysis.formats.rst
#: ../../source/_generated/freeports_analysis.formats_utils.deserialize.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_font.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.font.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.rst
#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.match.rst
#: ../../source/_generated/freeports_analysis.main.rst
#: freeports_analysis.formats_utils.pdf_filter.filter_page_if
#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering
#: freeports_analysis.formats_utils.text_extract.standard_text_extraction of
msgid "Parameters"
msgstr ""

#: freeports_analysis.cmd.overwrite_with_args:4
#: freeports_analysis.conf_parse.apply_config:4
#: freeports_analysis.conf_parse.get_config_file:5
#: freeports_analysis.conf_parse.overwrite_with_config_file:4
#: freeports_analysis.conf_parse.overwrite_with_env_vars:4
#: freeports_analysis.main.batch_job_confs:4 of
msgid "configuration to overwrite"
msgstr ""

#: freeports_analysis.cmd.overwrite_with_args:6
#: freeports_analysis.conf_parse.apply_config:6
#: freeports_analysis.conf_parse.get_config_file:7
#: freeports_analysis.conf_parse.overwrite_with_config_file:6
#: freeports_analysis.conf_parse.overwrite_with_env_vars:6 of
msgid "location of configuration to update"
msgstr ""

#: ../../source/_generated/freeports_analysis.cmd.rst
#: ../../source/_generated/freeports_analysis.conf_parse.rst
#: ../../source/_generated/freeports_analysis.consts.rst
#: ../../source/_generated/freeports_analysis.download.rst
#: ../../source/_generated/freeports_analysis.formats.rst
#: ../../source/_generated/freeports_analysis.formats_utils.deserialize.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_font.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.font.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.rst
#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.match.rst
#: ../../source/_generated/freeports_analysis.main.rst
#: freeports_analysis.formats_utils.pdf_filter.filter_page_if
#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering
#: freeports_analysis.formats_utils.text_extract.standard_text_extraction of
msgid "Returns"
msgstr ""

#: freeports_analysis.cmd.overwrite_with_args:9
#: freeports_analysis.conf_parse.apply_config:9
#: freeports_analysis.conf_parse.get_config_file:10
#: freeports_analysis.conf_parse.overwrite_with_config_file:9
#: freeports_analysis.conf_parse.overwrite_with_env_vars:9 of
msgid ""
"first `dict` is the new configuration, second is the updated location "
"`dict`"
msgstr ""

#: ../../source/_generated/freeports_analysis.cmd.rst
#: ../../source/_generated/freeports_analysis.conf_parse.rst
#: ../../source/_generated/freeports_analysis.consts.rst
#: ../../source/_generated/freeports_analysis.download.rst
#: ../../source/_generated/freeports_analysis.formats_utils.deserialize.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_font.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.font.rst
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.position.rst
#: ../../source/_generated/freeports_analysis.formats_utils.rst
#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.match.rst
#: ../../source/_generated/freeports_analysis.main.rst
#: freeports_analysis.formats_utils.pdf_filter.filter_page_if
#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering
#: freeports_analysis.formats_utils.text_extract.standard_text_extraction of
msgid "Return type"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:2
msgid "freeports\\_analysis.conf\\_parse"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
msgid ""
":py:obj:`apply_config <freeports_analysis.conf_parse.apply_config>`\\ "
"\\(config\\, config\\_location\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
#: freeports_analysis.conf_parse.apply_config:1 of
msgid ""
"Update configuration and `dict` rappresenting from where the "
"configuration is loaded using the configuration file and the environment "
"variables"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
msgid ""
":py:obj:`get_config_file "
"<freeports_analysis.conf_parse.get_config_file>`\\ \\(config\\, "
"config\\_location\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
msgid ""
"Overwrite the configuration and the `dict` that rappresent from where the"
" configuration is loaded on the `CONFIG_FILE` entry."
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
msgid ""
":py:obj:`log_config <freeports_analysis.conf_parse.log_config>`\\ "
"\\(logger\\, config\\, config\\_location\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
#: freeports_analysis.conf_parse.log_config:1 of
msgid "Log with debug priority the configuration provided"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
msgid ""
":py:obj:`overwrite_with_config_file "
"<freeports_analysis.conf_parse.overwrite_with_config_file>`\\ "
"\\(config\\, ...\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
#: freeports_analysis.conf_parse.overwrite_with_config_file:1 of
msgid ""
"Overwrite configuration provided and update the dictionary containing "
"from where the configuration are loaded from accordingly, using the "
"configuration file"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
msgid ""
":py:obj:`overwrite_with_env_vars "
"<freeports_analysis.conf_parse.overwrite_with_env_vars>`\\ \\(config\\, "
"config\\_location\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
#: freeports_analysis.conf_parse.overwrite_with_env_vars:1 of
msgid ""
"Overwrite configuration provided and update the dictionary containing "
"from where the configuration are loaded from accordingly, using "
"environment variables"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
msgid ""
":py:obj:`validate_conf <freeports_analysis.conf_parse.validate_conf>`\\ "
"\\(config\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:18:<autosummary>:1
#: freeports_analysis.conf_parse.validate_conf:1 of
msgid "Function that validate the configuration provided"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst:20
#: ../../source/_generated/freeports_analysis.consts.rst:9
#: ../../source/_generated/freeports_analysis.formats.rst:17
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:9
#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:17
#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:16
msgid "Classes"
msgstr ""

#: freeports_analysis.conf_parse.PossibleLocationConfig:1:<autosummary>:1 of
msgid ""
":py:obj:`PossibleLocationConfig "
"<freeports_analysis.conf_parse.PossibleLocationConfig>`\\ \\(\\*values\\)"
msgstr ""

#: freeports_analysis.conf_parse.PossibleLocationConfig:1
#: freeports_analysis.conf_parse.PossibleLocationConfig:1:<autosummary>:1 of
msgid "Rappresent from where the options can come from"
msgstr ""

#: freeports_analysis.conf_parse.get_config_file:1 of
msgid ""
"Overwrite the configuration and the `dict` that rappresent from where the"
" configuration is loaded on the `CONFIG_FILE` entry. This has to be "
"parsed before overwriting all the other options in order to set the "
"correct configuration file to load"
msgstr ""

#: freeports_analysis.conf_parse.log_config:3 of
msgid "the logger that has to log"
msgstr ""

#: freeports_analysis.conf_parse.validate_conf:3 of
msgid "configuration to validate"
msgstr ""

#: ../../source/_generated/freeports_analysis.conf_parse.rst
#: ../../source/_generated/freeports_analysis.consts.rst
#: ../../source/_generated/freeports_analysis.download.rst
#: ../../source/_generated/freeports_analysis.formats_utils.deserialize.rst
#: ../../source/_generated/freeports_analysis.main.rst
msgid "Raises"
msgstr ""

#: freeports_analysis.conf_parse.validate_conf:6 of
msgid "verbosity must be in [0:5]"
msgstr ""

#: freeports_analysis.conf_parse.validate_conf:7 of
msgid ""
"at least one location for input file (from url or local filesystem) "
"should be specified"
msgstr ""

#: freeports_analysis.conf_parse.validate_conf:8 of
msgid "invalid out path"
msgstr ""

#: freeports_analysis.conf_parse.validate_conf:9 of
msgid "invalid batch file path"
msgstr ""

#: freeports_analysis.conf_parse.validate_conf:10 of
msgid "if in `BATCH MODE` out path has to be directory or `.tar.gz` archive"
msgstr ""

#: ../../source/_generated/freeports_analysis.consts.rst:2
msgid "freeports\\_analysis.consts"
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1 of
msgid ""
":py:obj:`Bond <freeports_analysis.consts.Bond>`\\ \\(page\\, targets\\, "
"company\\, subfund\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: freeports_analysis.consts.Bond:1
#: freeports_analysis.consts.Bond:1:<autosummary>:1 of
msgid "Concrete class representing bond financial instruments."
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1 of
msgid ":py:obj:`Currency <freeports_analysis.consts.Currency>`\\ \\(\\*values\\)"
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1
#: freeports_analysis.consts.Currency:1 of
msgid "Enumeration of supported currency codes."
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1 of
msgid ""
":py:obj:`Equity <freeports_analysis.consts.Equity>`\\ \\(page\\, "
"targets\\, company\\, subfund\\, ...\\)"
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1
#: freeports_analysis.consts.Equity:1 of
msgid "Concrete class representing equity financial instruments."
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1 of
msgid ""
":py:obj:`FinancialData <freeports_analysis.consts.FinancialData>`\\ "
"\\(page\\, targets\\, company\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1
#: freeports_analysis.consts.FinancialData:1 of
msgid "Abstract base class representing financial data."
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1 of
msgid ""
":py:obj:`FinancialInstrument "
"<freeports_analysis.consts.FinancialInstrument>`\\ \\(\\*values\\)"
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1
#: freeports_analysis.consts.FinancialInstrument:1 of
msgid "Enumeration of financial instrument types."
msgstr ""

#: freeports_analysis.consts.Bond:1:<autosummary>:1 of
msgid ""
":py:obj:`PdfFormats <freeports_analysis.consts.PdfFormats>`\\ "
"\\(\\*values\\)"
msgstr ""

#: freeports_analysis.consts.Bond:3 of
msgid ""
"Extends FinancialData with bond-specific attributes including maturity "
"date and interest rate."
msgstr ""

#: freeports_analysis.consts.Bond:8 freeports_analysis.consts.Bond.maturity:1
#: of
msgid "The maturity date of the bond."
msgstr ""

#: freeports_analysis.consts.Bond freeports_analysis.consts.Bond.instrument
#: freeports_analysis.consts.Bond.interest_rate
#: freeports_analysis.consts.Bond.maturity
#: freeports_analysis.consts.Equity.instrument
#: freeports_analysis.consts.FinancialData
#: freeports_analysis.consts.FinancialData.acquisition_cost
#: freeports_analysis.consts.FinancialData.company
#: freeports_analysis.consts.FinancialData.currency
#: freeports_analysis.consts.FinancialData.market_value
#: freeports_analysis.consts.FinancialData.nominal_quantity
#: freeports_analysis.consts.FinancialData.page
#: freeports_analysis.consts.FinancialData.perc_net_assets
#: freeports_analysis.consts.FinancialData.subfund
#: freeports_analysis.formats.PdfBlock freeports_analysis.formats.TextBlock
#: freeports_analysis.formats_utils.pdf_filter.OnePdfBlockType
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange
#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType of
msgid "type"
msgstr ""

#: freeports_analysis.consts.Bond:10 of
msgid "datetime.date, optional"
msgstr ""

#: freeports_analysis.consts.Bond:14 of
msgid "The interest rate of the bond (should be between 0 and 1)."
msgstr ""

#: freeports_analysis.consts.Bond:16 freeports_analysis.consts.FinancialData:58
#: of
msgid "float, optional"
msgstr ""

#: freeports_analysis.consts.Bond.instrument:1 of
msgid "Identifies this instrument as BOND type."
msgstr ""

#: freeports_analysis.consts.Bond.instrument:3 of
msgid "Always returns FinancialInstrument.BOND"
msgstr ""

#: freeports_analysis.consts.Bond.instrument:6
#: freeports_analysis.consts.Equity.instrument:6 of
msgid "FinancialInstrument"
msgstr ""

#: freeports_analysis.consts.Bond.interest_rate:1 of
msgid "The interest rate of the bond."
msgstr ""

#: freeports_analysis.consts.Bond.interest_rate:3 of
msgid "The interest rate value"
msgstr ""

#: freeports_analysis.consts.Bond.interest_rate:7
#: freeports_analysis.formats_utils.pdf_filter.filter_page_if:13
#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:25
#: freeports_analysis.formats_utils.text_extract.standard_text_extraction:15 of
msgid "Notes"
msgstr ""

#: freeports_analysis.consts.Bond.interest_rate:8 of
msgid "Logs a warning if interest rate is not normalized (0-1 range)."
msgstr ""

#: freeports_analysis.consts.Bond.interest_rate:10
#: freeports_analysis.consts.FinancialData.acquisition_cost:3 of
msgid "float or None"
msgstr ""

#: freeports_analysis.consts.Bond.maturity:3 of
msgid "datetime.date or None"
msgstr ""

#: freeports_analysis.consts.Bond.to_dict:1
#: freeports_analysis.consts.FinancialData.to_dict:1 of
msgid "Cast financial data to python dictionary"
msgstr ""

#: freeports_analysis.consts.Bond.to_dict:3
#: freeports_analysis.consts.FinancialData.to_dict:3 of
msgid "casted data"
msgstr ""

#: freeports_analysis.consts.Currency:3 of
msgid "Contains standard 3-letter ISO currency codes for major world currencies."
msgstr ""

#: freeports_analysis.consts.Equity:3 of
msgid ""
"Inherits from FinancialData and implements the instrument property to "
"identify as EQUITY type."
msgstr ""

#: freeports_analysis.consts.Equity.instrument:1 of
msgid "Identifies this instrument as EQUITY type."
msgstr ""

#: freeports_analysis.consts.Equity.instrument:3 of
msgid "Always returns FinancialInstrument.EQUITY"
msgstr ""

#: freeports_analysis.consts.FinancialData:3 of
msgid ""
"This class serves as the foundation for specific financial instrument "
"types, providing common attributes and validation."
msgstr ""

#: freeports_analysis.consts.FinancialData:8 of
msgid "The page number where the financial data appears (must be positive)."
msgstr ""

#: freeports_analysis.consts.FinancialData:10
#: freeports_analysis.consts.FinancialData.page:3 of
msgid "int"
msgstr ""

#: freeports_analysis.consts.FinancialData:14 of
msgid "The list of companies to search for, used as company validation"
msgstr ""

#: freeports_analysis.consts.FinancialData:16 of
msgid "List[str]"
msgstr ""

#: freeports_analysis.consts.FinancialData:20
#: freeports_analysis.consts.FinancialData.company:1 of
msgid "The name of the company or issuer."
msgstr ""

#: freeports_analysis.consts.FinancialData:22
#: freeports_analysis.consts.FinancialData:46
#: freeports_analysis.consts.FinancialData.company:3
#: freeports_analysis.consts.FinancialData.subfund:3
#: freeports_analysis.formats.TextBlock:19 of
msgid "str"
msgstr ""

#: freeports_analysis.consts.FinancialData:26
#: freeports_analysis.consts.FinancialData.market_value:1 of
msgid "The current market value of the instrument."
msgstr ""

#: freeports_analysis.consts.FinancialData:28
#: freeports_analysis.consts.FinancialData:40
#: freeports_analysis.consts.FinancialData.market_value:3
#: freeports_analysis.consts.FinancialData.perc_net_assets:3
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:7
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:13
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:19
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:31
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:37
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange:7
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange:13
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange:7
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange:13 of
msgid "float"
msgstr ""

#: freeports_analysis.consts.FinancialData:32
#: freeports_analysis.consts.FinancialData.currency:1 of
msgid "The currency in which the value is denominated."
msgstr ""

#: freeports_analysis.consts.FinancialData:34
#: freeports_analysis.consts.FinancialData.currency:3 of
msgid "Currency"
msgstr ""

#: freeports_analysis.consts.FinancialData:38 of
msgid "Percentage of net assets (must be between 0 and 1)."
msgstr ""

#: freeports_analysis.consts.FinancialData:44
#: freeports_analysis.consts.FinancialData.subfund:1 of
msgid "The subfund to which this instrument belongs."
msgstr ""

#: freeports_analysis.consts.FinancialData:50
#: freeports_analysis.consts.FinancialData.nominal_quantity:1 of
msgid "The nominal quantity of the instrument, if applicable."
msgstr ""

#: freeports_analysis.consts.FinancialData:52 of
msgid "int, optional"
msgstr ""

#: freeports_analysis.consts.FinancialData:56
#: freeports_analysis.consts.FinancialData.acquisition_cost:1 of
msgid "The original acquisition cost of the instrument."
msgstr ""

#: freeports_analysis.consts.FinancialData:60 of
msgid ""
"If perc_net_assets is not between 0 and 1.     If page is not a positive "
"number."
msgstr ""

#: freeports_analysis.consts.FinancialData.instrument:1 of
msgid ""
"Abstract property to identify the financial instrument type. :returns: "
"The type of financial instrument (EQUITY, BOND, etc.) :rtype: "
"FinancialInstrument"
msgstr ""

#: freeports_analysis.consts.FinancialData.nominal_quantity:3 of
msgid "int or None"
msgstr ""

#: freeports_analysis.consts.FinancialData.page:1 of
msgid "The page number where the financial data appears."
msgstr ""

#: freeports_analysis.consts.FinancialData.perc_net_assets:1 of
msgid "Percentage of net assets (between 0 and 1)."
msgstr ""

#: ../../source/_generated/freeports_analysis.download.rst:2
msgid "freeports\\_analysis.download"
msgstr ""

#: freeports_analysis.download.download_pdf:1:<autosummary>:1 of
msgid ""
":py:obj:`download_pdf <freeports_analysis.download.download_pdf>`\\ "
"\\(url\\[\\, pdf\\]\\)"
msgstr ""

#: freeports_analysis.download.download_pdf:1
#: freeports_analysis.download.download_pdf:1:<autosummary>:1 of
msgid "Function to download pdf file from url"
msgstr ""

#: freeports_analysis.download.download_pdf:3 of
msgid "unique resource identifier on internet"
msgstr ""

#: freeports_analysis.download.download_pdf:5 of
msgid "path of the file where to save the file in filesystem"
msgstr ""

#: freeports_analysis.download.download_pdf:8 of
msgid "output byte stream with input output operation like file"
msgstr ""

#: freeports_analysis.download.download_pdf:11 of
msgid ""
"if the code returned from the http get call is an error code, an "
"exception occurs"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:2
msgid "freeports\\_analysis.formats"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:15:<autosummary>:1
msgid ""
":py:obj:`deserialize_exec "
"<freeports_analysis.formats.deserialize_exec>`\\ \\(text\\_blocks\\, "
"targets\\, ...\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:15:<autosummary>:1
#: freeports_analysis.formats.deserialize_exec:1 of
msgid ""
"Converts TextBlocks into tabular data using a specified formatting "
"function."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:15:<autosummary>:1
msgid ""
":py:obj:`pdf_filter_exec <freeports_analysis.formats.pdf_filter_exec>`\\ "
"\\(batch\\_pages\\, i\\_batch\\_page\\, ...\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:15:<autosummary>:1
#: freeports_analysis.formats.pdf_filter_exec:1 of
msgid ""
"Processes a PDF document through a filter function to extract relevant "
"blocks."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:15:<autosummary>:1
msgid ""
":py:obj:`text_extract_exec "
"<freeports_analysis.formats.text_extract_exec>`\\ \\(pdf\\_blocks\\, "
"targets\\, ...\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:15:<autosummary>:1
#: freeports_analysis.formats.text_extract_exec:1 of
msgid ""
"Extracts text content from PDF blocks using a specified extraction "
"function."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:22:<autosummary>:1
msgid ""
":py:obj:`PdfBlock <freeports_analysis.formats.PdfBlock>`\\ "
"\\(type\\_block\\, metadata\\, xml\\_ele\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:22:<autosummary>:1
#: freeports_analysis.formats.PdfBlock:1 of
msgid ""
"Represents a PDF content block with data to be extracted or relevant for "
"subsequent filtering stages."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:22:<autosummary>:1
msgid ""
":py:obj:`TextBlock <freeports_analysis.formats.TextBlock>`\\ "
"\\(type\\_block\\, metadata\\, pdf\\_block\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:22:<autosummary>:1
#: freeports_analysis.formats.TextBlock:1 of
msgid "Represents a processed text block derived from a PdfBlock."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:24
#: ../../source/_generated/freeports_analysis.main.rst:18
msgid "Exceptions"
msgstr ""

#: freeports_analysis.formats.ExpectedPdfBlockNotFound:1:<autosummary>:1 of
msgid ""
":py:obj:`ExpectedPdfBlockNotFound "
"<freeports_analysis.formats.ExpectedPdfBlockNotFound>`\\"
msgstr ""

#: freeports_analysis.formats.ExpectedPdfBlockNotFound:1
#: freeports_analysis.formats.ExpectedPdfBlockNotFound:1:<autosummary>:1 of
msgid "Raised when a required PdfBlock is not found"
msgstr ""

#: freeports_analysis.formats.ExpectedPdfBlockNotFound:1:<autosummary>:1 of
msgid ""
":py:obj:`ExpectedTextBlockNotFound "
"<freeports_analysis.formats.ExpectedTextBlockNotFound>`\\"
msgstr ""

#: freeports_analysis.formats.ExpectedPdfBlockNotFound:1:<autosummary>:1
#: freeports_analysis.formats.ExpectedTextBlockNotFound:1 of
msgid "Raised when a required TextBlock is not found"
msgstr ""

#: freeports_analysis.formats.PdfBlock:6 of
msgid "The type of the PDF block."
msgstr ""

#: freeports_analysis.formats.PdfBlock:8 freeports_analysis.formats.TextBlock:7
#: of
msgid "Enum"
msgstr ""

#: freeports_analysis.formats.PdfBlock:12
#: freeports_analysis.formats.TextBlock:11 of
msgid "Additional metadata associated with the block."
msgstr ""

#: freeports_analysis.formats.PdfBlock:14 of
msgid "Optional[dict]"
msgstr ""

#: freeports_analysis.formats.PdfBlock:18 of
msgid "The textual content extracted from the block."
msgstr ""

#: freeports_analysis.formats.PdfBlock:20 of
msgid "Optional[str]"
msgstr ""

#: freeports_analysis.formats.TextBlock:5 of
msgid "The type of the text block."
msgstr ""

#: freeports_analysis.formats.TextBlock:13 of
msgid "dict"
msgstr ""

#: freeports_analysis.formats.TextBlock:17 of
msgid "The textual content of the block."
msgstr ""

#: freeports_analysis.formats.TextBlock:23 of
msgid "The original PdfBlock this text was derived from."
msgstr ""

#: freeports_analysis.formats.TextBlock:25 of
msgid "PdfBlock"
msgstr ""

#: freeports_analysis.formats.deserialize_exec:3 of
msgid "List of TextBlock objects to process."
msgstr ""

#: freeports_analysis.formats.deserialize_exec:4 of
msgid "Function that converts a TextBlock into a finantial data class."
msgstr ""

#: freeports_analysis.formats.deserialize_exec:6 of
msgid "List of FinantialData classes containing the deserialized data."
msgstr ""

#: freeports_analysis.formats.pdf_filter_exec:3 of
msgid "The PDF document to process."
msgstr ""

#: freeports_analysis.formats.pdf_filter_exec:4 of
msgid ""
"A function that takes an XML element and returns a list of relevant "
"PdfBlock."
msgstr ""

#: freeports_analysis.formats.pdf_filter_exec:7 of
msgid "List of PdfBlock objects containing the filtered content."
msgstr ""

#: freeports_analysis.formats.text_extract_exec:3 of
msgid "List of PdfBlock objects to process."
msgstr ""

#: freeports_analysis.formats.text_extract_exec:4 of
msgid "List of target identifiers for extraction."
msgstr ""

#: freeports_analysis.formats.text_extract_exec:5 of
msgid "Function that processes PdfBlocks and targets into TextBlocks."
msgstr ""

#: freeports_analysis.formats.text_extract_exec:7 of
msgid "List of TextBlock objects containing the extracted content."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`amundi <freeports_analysis.formats.amundi>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.amundi:1 of
msgid "AMUNDI format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`amundi2 <freeports_analysis.formats.amundi2>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.amundi2:1 of
msgid "AMUNDI2 format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`anima <freeports_analysis.formats.anima>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.anima:1 of
msgid "ANIMA format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`arca <freeports_analysis.formats.arca>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.arca:1 of
msgid "ARCA format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`asteria <freeports_analysis.formats.asteria>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.asteria:1 of
msgid "ASTERIA submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`eurizon <freeports_analysis.formats.eurizon>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.eurizon:1 of
msgid "EURIZON format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`eurizon_it <freeports_analysis.formats.eurizon_it>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.eurizon_it:1 of
msgid "EURIZON_IT format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`eurizon_old <freeports_analysis.formats.eurizon_old>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.eurizon_old:1 of
msgid "EURIZON_OLD format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`fideuram <freeports_analysis.formats.fideuram>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.fideuram:1 of
msgid "FIDEURAM format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
msgid ":py:obj:`mediolanum <freeports_analysis.formats.mediolanum>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.rst:45:<autosummary>:1
#: freeports_analysis.formats.mediolanum:1 of
msgid "MEDIOLANUM format submodule"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.amundi.rst:2
msgid "freeports\\_analysis.formats.amundi"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.amundi2.rst:2
msgid "freeports\\_analysis.formats.amundi2"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.anima.rst:2
msgid "freeports\\_analysis.formats.anima"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.anima.rst:12:<autosummary>:1
msgid ""
":py:obj:`pdf_filter <freeports_analysis.formats.anima.pdf_filter>`\\ "
"\\(xml\\_root\\, page\\_number\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.arca.rst:2
msgid "freeports\\_analysis.formats.arca"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.asteria.rst:2
msgid "freeports\\_analysis.formats.asteria"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.eurizon.rst:2
msgid "freeports\\_analysis.formats.eurizon"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.eurizon_it.rst:2
msgid "freeports\\_analysis.formats.eurizon\\_it"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.eurizon_old.rst:2
msgid "freeports\\_analysis.formats.eurizon\\_old"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.fideuram.rst:2
msgid "freeports\\_analysis.formats.fideuram"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats.mediolanum.rst:2
msgid "freeports\\_analysis.formats.mediolanum"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.rst:2
msgid "freeports\\_analysis.formats\\_utils"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: of
msgid ""
":py:obj:`default_if_not_implemented "
"<freeports_analysis.formats_utils.default_if_not_implemented>`\\ "
"\\(default\\_func\\)"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1
#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: of
msgid ""
"Replace the decorated function with a default given as argument of the "
"decorator if the decorated function raise a `NotImplementedError` or "
"return `None`"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: of
msgid ""
":py:obj:`normalize_string "
"<freeports_analysis.formats_utils.normalize_string>`\\ \\(string\\[\\, "
"lower\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: of
msgid "Normalize a string by: 1."
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: of
msgid ""
":py:obj:`normalize_word "
"<freeports_analysis.formats_utils.normalize_word>`\\ \\(word\\[\\, "
"lower\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: of
msgid "Normalize a word by: 1."
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: of
msgid ""
":py:obj:`overwrite_if_implemented "
"<freeports_analysis.formats_utils.overwrite_if_implemented>`\\ "
"\\(primary\\_func\\)"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:1:<autosummary>:1
#: freeports_analysis.formats_utils.overwrite_if_implemented:1 of
msgid ""
"Replace the decorated default function with a function given as argument "
"of the decorator if that function do not raise a `NotImplementedError` or"
" return `None`"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:4 of
msgid "default function"
msgstr ""

#: freeports_analysis.formats_utils.default_if_not_implemented:7 of
msgid ""
"the default function if the deorated function is overwritten, if not the "
"decorated function"
msgstr ""

#: freeports_analysis.formats_utils.normalize_string:1 of
msgid ""
"Normalize a string by: 1. Stripping leading/trailing whitespace 2. "
"Converting to lowercase 3. Collapsing multiple whitespaces into single "
"spaces :param string: Input string to normalize :type string: str"
msgstr ""

#: freeports_analysis.formats_utils.normalize_string:8 of
msgid "Normalized string"
msgstr ""

#: freeports_analysis.formats_utils.normalize_word:1 of
msgid ""
"Normalize a word by: 1. Stripping leading/trailing whitespace 2. Removing"
" all whitespace between characters :param word: Input word to normalize "
":type word: str"
msgstr ""

#: freeports_analysis.formats_utils.normalize_word:7 of
msgid "Normalized word with no whitespace"
msgstr ""

#: freeports_analysis.formats_utils.overwrite_if_implemented:4 of
msgid "implementation of a function"
msgstr ""

#: freeports_analysis.formats_utils.overwrite_if_implemented:7 of
msgid ""
"the function given as argument of the decorator if implemented, otherwise"
" the decorated default"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.rst:25:<autosummary>:1
msgid ":py:obj:`deserialize <freeports_analysis.formats_utils.deserialize>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.rst:25:<autosummary>:1
#: freeports_analysis.formats_utils.deserialize:1 of
msgid "Utils for creating deserialize routines and functions"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.rst:25:<autosummary>:1
msgid ":py:obj:`pdf_filter <freeports_analysis.formats_utils.pdf_filter>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.rst:25:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter:1 of
msgid "Utilities for writing `pdf_filter` functions"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.rst:25:<autosummary>:1
msgid ":py:obj:`text_extract <freeports_analysis.formats_utils.text_extract>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.rst:25:<autosummary>:1
#: freeports_analysis.formats_utils.text_extract:1 of
msgid "Module for text block processing and extraction in document analysis."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.deserialize.rst:2
msgid "freeports\\_analysis.formats\\_utils.deserialize"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid ""
":py:obj:`perc_to_float "
"<freeports_analysis.formats_utils.deserialize.perc_to_float>`\\ "
"\\(perc\\[\\, norm\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1
#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid "Convert a percentage string to float value."
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid ""
":py:obj:`standard_deserialization "
"<freeports_analysis.formats_utils.deserialize.standard_deserialization>`\\"
" \\(\\[...\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: freeports_analysis.formats_utils.deserialize.standard_deserialization:1 of
msgid ""
"Decorator factory that creates a deserializer function for TextBlock "
"metadata."
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid ""
":py:obj:`to_currency "
"<freeports_analysis.formats_utils.deserialize.to_currency>`\\ \\(data\\)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: freeports_analysis.formats_utils.deserialize.to_currency:1 of
msgid "Convert a string to a Currency enum value."
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid ""
":py:obj:`to_date "
"<freeports_analysis.formats_utils.deserialize.to_date>`\\ \\(data\\)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: freeports_analysis.formats_utils.deserialize.to_date:1 of
msgid "Convert a date string to a date object using multiple possible formats."
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid ""
":py:obj:`to_float "
"<freeports_analysis.formats_utils.deserialize.to_float>`\\ \\(data\\)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: freeports_analysis.formats_utils.deserialize.to_float:1 of
msgid ""
"Cast to float in a more loose way than the standard python `float` namely"
" it removes dots or commas and spaces around the string and handles "
"thousand separators."
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid ""
":py:obj:`to_int <freeports_analysis.formats_utils.deserialize.to_int>`\\ "
"\\(data\\)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: freeports_analysis.formats_utils.deserialize.to_int:1 of
msgid ""
"Cast to int in a more loose way than the standard python `int` namely it "
"remove dots or commas and spaces around the string"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: of
msgid ""
":py:obj:`to_str <freeports_analysis.formats_utils.deserialize.to_str>`\\ "
"\\(data\\)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:1:<autosummary>:1
#: freeports_analysis.formats_utils.deserialize.to_str:1 of
msgid "Normalize a string by stripping whitespace from both ends."
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:3 of
msgid ""
"Handles various percentage string formats by: - Normalizing the string "
"(removing spaces, converting commas to dots) - Removing percentage signs "
"- Optionally converting to decimal form (dividing by 100)"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:8 of
msgid "The percentage string to convert (may contain '%', ',', or '.')"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:10 of
msgid ""
"Whether to normalize the result by dividing by 100 (default True) If "
"False, returns the raw numeric value from the string"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:14 of
msgid "The converted float value"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.perc_to_float:17 of
msgid "If the string cannot be converted to a float after processing"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.standard_deserialization:3 of
msgid ""
"The resulting decorator transforms a TextBlock's metadata into a "
"dictionary with values cast according to the provided mapping. Special "
"handling is done for 'match' key which is renamed to 'company'."
msgstr ""

#: freeports_analysis.formats_utils.deserialize.standard_deserialization:7 of
msgid "Dictionary mapping output keys to type casting functions"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.standard_deserialization:9 of
msgid ""
"Whether to use enhanced type casting for int and str (default True) When "
"True, replaces int with to_int and str with to_str"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.standard_deserialization:13 of
msgid "A decorator that takes a function and returns a deserializer function"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_currency:3 of
msgid "The currency string to convert (e.g. \"USD\", \"EUR\")"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_currency:6 of
msgid "The corresponding Currency enum value"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_currency:9 of
msgid "If the string doesn't match any Currency enum member"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_date:3 of
msgid "The date string to parse"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_date:6 of
msgid "The parsed date object"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_date:9 of
msgid "If the string doesn't match any of the supported date formats"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_float:5
#: freeports_analysis.formats_utils.deserialize.to_int:4 of
msgid "number written in string form"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_float:8
#: freeports_analysis.formats_utils.deserialize.to_int:7 of
msgid "casted result"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_float:11 of
msgid "the resulting processed string cannot be casted to `float`"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_int:10 of
msgid "the resulting processed string cannot be casted to `int`"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_str:3 of
msgid "The input string to be normalized"
msgstr ""

#: freeports_analysis.formats_utils.deserialize.to_str:6 of
msgid "The stripped string"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:15:<autosummary>:1
msgid ""
":py:obj:`filter_page_if "
"<freeports_analysis.formats_utils.pdf_filter.filter_page_if>`\\ "
"\\(condition\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:15:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.filter_page_if:1 of
msgid ""
"Decorator factory for conditionally applying a PDF filter based on a "
"predicate."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:15:<autosummary>:1
msgid ""
":py:obj:`standard_extraction_subfund "
"<freeports_analysis.formats_utils.pdf_filter.standard_extraction_subfund>`\\"
" \\(subfund\\_height\\, ...\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:15:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.standard_extraction_subfund:1 of
msgid "Decorator with argument for extracting subfund text"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:15:<autosummary>:1
msgid ""
":py:obj:`standard_pdf_filtering "
"<freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering>`\\ "
"\\(header\\_txt\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:15:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:1 of
msgid ""
"Decorator factory for creating PDF filters that process pages with "
"specific header and body fonts and extract subfund information"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.OnePdfBlockType:1:<autosummary>:1
#: of
msgid ""
":py:obj:`OnePdfBlockType "
"<freeports_analysis.formats_utils.pdf_filter.OnePdfBlockType>`\\ "
"\\(\\*values\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.OnePdfBlockType:1
#: freeports_analysis.formats_utils.pdf_filter.OnePdfBlockType:1:<autosummary>:1
#: of
msgid "Enum representing one type of pdf blocks in document processing."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.OnePdfBlockType:5 of
msgid "Pdf block with relevant information to extract."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.OnePdfBlockType:7
#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType:7
#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType:13 of
msgid "enum"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.filter_page_if:3 of
msgid ""
"Creates a decorator that will only execute the wrapped PDF filter "
"function if the specified condition evaluates to True for the given XML "
"root element."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.filter_page_if:6 of
msgid ""
"A function that takes an XML element and returns True if the filter "
"should be applied"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.filter_page_if:9 of
msgid "A decorator that can be applied to PDF filter functions"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.filter_page_if:14 of
msgid ""
"The decorated PDF filter function must accept an XML root element and "
"return a list of PdfBlocks"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_extraction_subfund:3 of
msgid "where to find the subfund"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_extraction_subfund:5 of
msgid "font of the subfund"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_extraction_subfund:8 of
msgid "decorator to add metadata on a update metadata func"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:4 of
msgid ""
"Creates a filter that: 1. Only processes pages containing the specified "
"header text in the specified header font 2. Extracts all lines with the "
"specified body font as relevant blocks 3. Extracts subfund in a range or "
"over a certain height using his font 4. Allows customization of page "
"metadata and block types through decorated functions"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:10 of
msgid "Text that must be present in header to process the page"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:12 of
msgid "Font name that header text must use"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:14 of
msgid ""
"Range in which the subfund has to be extracted or height over which "
"extract"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:16 of
msgid "Font name that the subfund uses"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:18 of
msgid "Font name for lines to extract as relevant blocks"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:21 of
msgid "Decorator that can be applied to PDF filter functions"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.standard_pdf_filtering:26 of
msgid ""
"The decorated function can override: - page_metadata(): returns "
"additional metadata dictionary for each page"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:31:<autosummary>:1
msgid ""
":py:obj:`pdf_parts "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:31:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts:1 of
msgid "Pdf xml parts in a friendly format (custom python classes)."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:31:<autosummary>:1
msgid ""
":py:obj:`select_font "
"<freeports_analysis.formats_utils.pdf_filter.select_font>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:31:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.select_font:1 of
msgid ""
"Utilities for selecting or deselecting lines based of font and text "
"information"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:31:<autosummary>:1
msgid ""
":py:obj:`select_position "
"<freeports_analysis.formats_utils.pdf_filter.select_position>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:31:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.select_position:1 of
msgid ""
"Utilities for selecting or deselecting lines or getting infos based of "
"geometrical information"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.rst:31:<autosummary>:1
msgid ":py:obj:`xml <freeports_analysis.formats_utils.pdf_filter.xml>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.pdf\\_parts"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine:1:<autosummary>:1
#: of
msgid ""
":py:obj:`ExtractedPdfLine "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine>`\\"
" \\(blk\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine:1:<autosummary>:1
#: of
msgid "A class representing a line extracted from a PDF XML structure."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine:3 of
msgid ""
"This class provides a friendly interface to access geometric properties, "
"font information, and text size of a line in a PDF document."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine:6 of
msgid "The XML element containing the line data."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.c:1
#: of
msgid "Get the center coordinate of the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.c:3
#: of
msgid "The center coordinate (x, y) of the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.corners:1
#: of
msgid "Get the corner coordinates of the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.corners:3
#: of
msgid ""
"A tuple of tuples representing the line's corners in the format (((x_tl, "
"y_tl), (x_tr, y_tr)), ((x_bl, y_bl), (x_br, y_br)))."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.font:1
#: of
msgid "Get the font used in the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.font:3
#: of
msgid "The font used in the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.geometry:1
#: of
msgid "Get the geometric properties of the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.geometry:3
#: of
msgid "The area representing the line's bounds."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.text_size:1
#: of
msgid "Get the text size used in the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.text_size:3
#: of
msgid "The text size used in the line."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.xml_blk:1
#: of
msgid "Get the original XML element containing the line data."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.ExtractedPdfLine.xml_blk:3
#: of
msgid "The original XML element containing the line data."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:22:<autosummary>:1
msgid ""
":py:obj:`font "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.font>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:22:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.font:1 of
msgid ""
"Definition of types for identify carateristic related with typographic "
"aspect of the line"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:22:<autosummary>:1
msgid ""
":py:obj:`generic "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:22:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic:1 of
msgid "Utilities for handling generic PDF parts and components."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:22:<autosummary>:1
msgid ""
":py:obj:`position "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.position>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.rst:22:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position:1 of
msgid ""
"Definition of types for identify characteristic related with geometrical "
"aspects of the line."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.font.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.pdf\\_parts.font"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.pdf\\_parts.generic"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:1:<autosummary>:1
#: of
msgid ""
":py:obj:`Range "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range>`\\ "
"\\(start\\, end\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:1:<autosummary>:1
#: of
msgid "A class representing a range with start and end values."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:5 of
msgid "The starting value of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:11 of
msgid "The ending value of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range:17 of
msgid "The size of the range (end - start)."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range.end:1 of
msgid "Get the end value of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range.end:3
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange.y1:3
#: of
msgid "The end value of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range.size:1
#: of
msgid "Calculate the size of the range (end - start)."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range.size:3
#: of
msgid "The size of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.generic.Range.start:1
#: of
msgid ""
"Get the start value of the range. :returns: The start value of the range."
" :rtype: float"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.pdf\\_parts.position"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:1:<autosummary>:1
#: of
msgid ""
":py:obj:`Area "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area>`\\ "
"\\(x\\_range\\, y\\_range\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:1:<autosummary>:1
#: of
msgid "A class representing a 2D area defined by X and Y ranges."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:1:<autosummary>:1
#: of
msgid ""
":py:obj:`XRange "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange>`\\"
" \\(start\\, end\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:1:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange:1 of
msgid "A class representing a range along the X-axis."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:1:<autosummary>:1
#: of
msgid ""
":py:obj:`YRange "
"<freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange>`\\"
" \\(start\\, end\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:1:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange:1 of
msgid "A class representing a range along the Y-axis."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:5
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.x_bounds:3
#: of
msgid "The range along the X-axis."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:7 of
msgid "XRange"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:11
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.y_bounds:3
#: of
msgid "The range along the Y-axis."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:13 of
msgid "YRange"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:17 of
msgid "The center coordinate of the area."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:19 of
msgid "Coord"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:23 of
msgid "The corner coordinates of the area."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:25 of
msgid "tuple"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:29 of
msgid "The width of the area (x_bounds.size)."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area:35 of
msgid "The height of the area (y_bounds.size)."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.c:1 of
msgid "Calculate the center coordinate of the area."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.c:3 of
msgid "The (x, y) center coordinate."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.corners:1
#: of
msgid "Get the corner coordinates of the area."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.corners:3
#: of
msgid ""
"The corner coordinates in the format (((x0,y0), (x1,y0)), ((x0,y1), "
"(x1,y1)))."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.height:1
#: of
msgid "Get the height of the area."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.height:3
#: of
msgid "The height (y_bounds.size)."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.width:1
#: of
msgid "Get the width of the area."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.width:3
#: of
msgid "The width (x_bounds.size)."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.x_bounds:1
#: of
msgid "Get the X-range bounds."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.Area.y_bounds:1
#: of
msgid "Get the Y-range bounds."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange:5
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange:5 of
msgid "Alias for start of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange:11
#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange:11 of
msgid "Alias for end of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange.x0:1
#: of
msgid ""
"Get the start value of the X-range. :returns: The start value of the "
"range. :rtype: float"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.XRange.x1:1
#: of
msgid ""
"Get the end value of the X-range. :returns: The end value of the range. "
":rtype: float"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange.y0:1
#: of
msgid "Get the start value of the Y-range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange.y0:3
#: of
msgid "The start value of the range."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.pdf_parts.position.YRange.y1:1
#: of
msgid "Get the end value of the Y-range."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_font.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.select\\_font"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_font.deselect_txt_font:1:<autosummary>:1
#: of
msgid ""
":py:obj:`deselect_txt_font "
"<freeports_analysis.formats_utils.pdf_filter.select_font.deselect_txt_font>`\\"
" \\(lines\\, deselection\\_list\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_font.deselect_txt_font:1
#: freeports_analysis.formats_utils.pdf_filter.select_font.deselect_txt_font:1:<autosummary>:1
#: of
msgid "Deselect text with a certain font and text combination"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_font.deselect_txt_font:3
#: of
msgid "list to filter"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_font.deselect_txt_font:5
#: of
msgid "list of text and font to search for"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_font.deselect_txt_font:8
#: of
msgid "filtered list"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.select_position.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.select\\_position"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_table_positions "
"<freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions>`\\"
" \\(lines\\[\\, return\\_columns\\, ...\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:1
#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:1:<autosummary>:1
#: of
msgid "Compute either row or column indexes for areas in a tabular layout."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:1:<autosummary>:1
#: of
msgid ""
":py:obj:`select_inside "
"<freeports_analysis.formats_utils.pdf_filter.select_position.select_inside>`\\"
" \\(lines\\, bounds\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:1:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.select_position.select_inside:1
#: of
msgid "Select only lines inside a range"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:1:<autosummary>:1
#: of
msgid ""
":py:obj:`select_outside "
"<freeports_analysis.formats_utils.pdf_filter.select_position.select_outside>`\\"
" \\(lines\\, bounds\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:1:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.select_position.select_outside:1
#: of
msgid "Select only lines outside a range"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:3
#: of
msgid "Whether to return column indexes (True) or row indexes (False)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:5
#: of
msgid "List of areas representing table cells"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:7
#: of
msgid "Whether to use smallest (True) or largest (False) dimension for rulers"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:9
#: of
msgid "Whether to use ruler position (True) or bounds (False) for classification"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.get_table_positions:12
#: of
msgid "A list of indexes corresponding to each area"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.select_inside:3
#: freeports_analysis.formats_utils.pdf_filter.select_position.select_outside:3
#: of
msgid "lines to filter"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.select_inside:5
#: freeports_analysis.formats_utils.pdf_filter.select_position.select_outside:5
#: of
msgid "area to filter from"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.select_inside:8
#: of
msgid "lines inside `bounds`"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.select_position.select_outside:8
#: of
msgid "lines outside `bounds`"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.xml"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.rst:15:<autosummary>:1
msgid ":py:obj:`font <freeports_analysis.formats_utils.pdf_filter.xml.font>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.rst:15:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.xml.font:1 of
msgid ""
"Low level utilities for handling typographic related aspects of the xml "
"tree."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.rst:15:<autosummary>:1
msgid ""
":py:obj:`position "
"<freeports_analysis.formats_utils.pdf_filter.xml.position>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.font.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.xml.font"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_lines_with_font "
"<freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font>`\\"
" \\(blk\\, font\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:1
#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:1:<autosummary>:1
#: of
msgid "Return all the line with a certain font in a tree"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_lines_with_txt_font "
"<freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_txt_font>`\\"
" \\(blk\\, txt\\, font\\[\\, ...\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:1:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_txt_font:1
#: of
msgid "Get lines with a certain txt and font"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:1:<autosummary>:1
#: of
msgid ""
":py:obj:`is_present_txt_font "
"<freeports_analysis.formats_utils.pdf_filter.xml.font.is_present_txt_font>`\\"
" \\(blk\\, txt\\, font\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:1:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.xml.font.is_present_txt_font:1
#: of
msgid ""
"Return if a certain pdf block with a specific text and font is present in"
" the tree"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:3
#: of
msgid "tree from which extract lines"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:5
#: of
msgid "font to extract"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_font:8
#: of
msgid "list of relevant blocks"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_txt_font:3
#: of
msgid "xml tree structure"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_txt_font:5
#: of
msgid "text to search for"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_txt_font:7
#: of
msgid "font to search for"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_txt_font:9
#: of
msgid ""
"if `True` return a list with all matches, if `False` just the first as a "
"scalar element"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.get_lines_with_txt_font:13
#: of
msgid "matching lines"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.is_present_txt_font:3
#: of
msgid "tree to search in"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.is_present_txt_font:5
#: of
msgid "text to search"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.is_present_txt_font:7
#: of
msgid "font to search"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.font.is_present_txt_font:10
#: of
msgid "boolean describing if the block is present or not"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.pdf_filter.xml.position.rst:2
msgid "freeports\\_analysis.formats\\_utils.pdf\\_filter.xml.position"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_bounds "
"<freeports_analysis.formats_utils.pdf_filter.xml.position.get_bounds>`\\ "
"\\(blk\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_lines_contained "
"<freeports_analysis.formats_utils.pdf_filter.xml.position.get_lines_contained>`\\"
" \\(blk\\[\\, x\\_range\\, y\\_range\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_position "
"<freeports_analysis.formats_utils.pdf_filter.xml.position.get_position>`\\"
" \\(blk\\, mean\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid ""
"Return the coordinates or center of a bounding box from a PDF block "
"element. :param blk: XML element representing the PDF block, expected to "
"contain a 'bbox' attribute. :type blk: etree.Element :param mean: If "
"True, return the center point (x, y) of the bounding box. If False, "
"return the full bounding box coordinates (x0, y0, x1, y1). :type mean: "
"bool."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid ""
":py:obj:`get_size "
"<freeports_analysis.formats_utils.pdf_filter.xml.position.get_size>`\\ "
"\\(blk\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid ""
":py:obj:`is_contained "
"<freeports_analysis.formats_utils.pdf_filter.xml.position.is_contained>`\\"
" \\(blk\\[\\, x\\_range\\, y\\_range\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: freeports_analysis.formats_utils.pdf_filter.xml.position.is_contained:1 of
msgid ""
"Check if a block's bounding box is fully contained within specified "
"ranges."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid ""
":py:obj:`is_positioned "
"<freeports_analysis.formats_utils.pdf_filter.xml.position.is_positioned>`\\"
" \\(blk\\[\\, x\\_range\\, y\\_range\\]\\)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1:<autosummary>:1
#: of
msgid "Check if a block is positioned within specified x and/or y ranges."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:1 of
msgid ""
"Return the coordinates or center of a bounding box from a PDF block "
"element. :param blk: XML element representing the PDF block, expected to "
"contain a 'bbox' attribute. :type blk: etree.Element :param mean: If "
"True, return the center point (x, y) of the bounding box."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:5 of
msgid "If False, return the full bounding box coordinates (x0, y0, x1, y1)."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.get_position:8 of
msgid ""
"A list of float values representing either the full bounding box or its "
"center. Returns None if no 'bbox' attribute is found."
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.is_contained:3 of
msgid "XML element representing a PDF block"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.is_contained:5 of
msgid "Horizontal range (min_x, max_x)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.is_contained:7 of
msgid "Vertical range (min_y, max_y)"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.is_contained:10 of
msgid "True if entire bbox is within ranges, False otherwise"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.is_positioned:1 of
msgid ""
"Check if a block is positioned within specified x and/or y ranges. :param"
" blk: XML element representing a PDF block :type blk: etree.Element "
":param x_range: Minimum and maximum x-coordinate values (left, right) "
":type x_range: Optional[Tuple[float, float]], optional :param y_range: "
"Minimum and maximum y-coordinate values (bottom, top) :type y_range: "
"Optional[Tuple[float, float]], optional"
msgstr ""

#: freeports_analysis.formats_utils.pdf_filter.xml.position.is_positioned:9 of
msgid "True if block's coordinates are within specified ranges, False otherwise"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:2
msgid "freeports\\_analysis.formats\\_utils.text\\_extract"
msgstr ""

#: freeports_analysis.formats_utils.text_extract:3 of
msgid ""
"This module provides functionality for: - Defining text block types "
"through enumerations - Matching text against targets using various "
"matching strategies - Extracting text blocks from PDF documents based on "
"target matches - Supporting different matching methods (exact, fuzzy, "
"prefix-based)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract:9 of
msgid ""
"Key components: - Matching functions (target_match, target_fuzzy_match, "
"target_prefix_match) - Decorators for text block type definition "
"(one_txt_blk, EquityBondTextBlockType) - Standard text extraction "
"functionality through standard_text_extraction decorator"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:14:<autosummary>:1
msgid ""
":py:obj:`standard_text_extraction "
"<freeports_analysis.formats_utils.text_extract.standard_text_extraction>`\\"
" \\(...\\[\\, currency\\, ...\\]\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:14:<autosummary>:1
#: freeports_analysis.formats_utils.text_extract.standard_text_extraction:1 of
msgid ""
"Decorator for defining standard text extraction logic from PDF blocks "
"based on target matches."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:14:<autosummary>:1
msgid ""
":py:obj:`standard_text_extraction_loop "
"<freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop>`\\"
" \\(\\[match\\_func\\]\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:14:<autosummary>:1
#: freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop:1
#: of
msgid "Decorator for standard text extraction loop."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType:1:<autosummary>:1
#: of
msgid ""
":py:obj:`EquityBondTextBlockType "
"<freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType>`\\"
" \\(\\*values\\)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType:1
#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType:1:<autosummary>:1
#: of
msgid "Enum representing two type of text blocks in document processing."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType:5 of
msgid "Text block containing target `Bond` row."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.EquityBondTextBlockType:11 of
msgid "Text block containing target `Equity` row."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction:4 of
msgid ""
"Dictionary specifying metadata keys and their relative positions "
"(offsets) from matched blocks"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction:7 of
msgid "Matching function to compare text against targets (default: target_match)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction:10 of
msgid ""
"A wrapped text extraction function that processes PDF blocks and returns "
"matched TextBlock objects"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction:16 of
msgid ""
"The decorated function can optionally be specified with the purpose of "
"including additional metadata. The extraction process: 1. Normalizes and "
"matches text against targets using the specified match_func 2. Extracts "
"metadata from surrounding blocks based on extract_positions 3. Creates "
"TextBlock objects for successful matches"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop:3
#: of
msgid ""
"This decorator wrap the function provide in the usual loop that give a "
"simplify and higher level context to the decorated `text_extraction` "
"function. Specifically it expect that in the metadata of each `PdfBlock` "
"is present an indicator of which column it is located graphycally in the "
"main table of the pdf page (it suppose that the data was tabular in some "
"way) `table-col`. The loop: - Take each block and concat the content with"
" the subsequent if"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop:10
#: of
msgid "they are on the same column."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop:11
#: of
msgid ""
"Use `match_func` to see if one between the target provided to the "
"extraction function match with the content  of the block."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop:13
#: of
msgid ""
"If it does it overwrite the list of `PdfBlock` to persist the "
"concatenation of the block with is subsequent."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop:15
#: of
msgid "Add `company` metadata with the match"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.standard_text_extraction_loop:16
#: of
msgid ""
"It create a `TextBlock` addint the metadata provided by the wrapped "
"function. The wrapped function take as parameters the block list and the "
"index of the matched block. It takes the modified list with merged "
"content for block in the same column that matches the target."
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:27:<autosummary>:1
msgid ":py:obj:`match <freeports_analysis.formats_utils.text_extract.match>`\\"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.rst:27:<autosummary>:1
#: freeports_analysis.formats_utils.text_extract.match:1 of
msgid "Functions for different target matching algorithms"
msgstr ""

#: ../../source/_generated/freeports_analysis.formats_utils.text_extract.match.rst:2
msgid "freeports\\_analysis.formats\\_utils.text\\_extract.match"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: of
msgid ""
":py:obj:`prefix_similarity "
"<freeports_analysis.formats_utils.text_extract.match.prefix_similarity>`\\"
" \\(a\\, b\\)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: of
msgid "Compute a similarity ratio from the beginning of the two strings."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: of
msgid ""
":py:obj:`target_fuzzy_match "
"<freeports_analysis.formats_utils.text_extract.match.target_fuzzy_match>`\\"
" \\(text\\, target\\, ratio\\)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: freeports_analysis.formats_utils.text_extract.match.target_fuzzy_match:1 of
msgid "Perform fuzzy string matching between normalized text and target."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: of
msgid ""
":py:obj:`target_match "
"<freeports_analysis.formats_utils.text_extract.match.target_match>`\\ "
"\\(text\\, target\\)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: freeports_analysis.formats_utils.text_extract.match.target_match:1 of
msgid "Check if normalized target string is contained within normalized text."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: of
msgid ""
":py:obj:`target_prefix_match "
"<freeports_analysis.formats_utils.text_extract.match.target_prefix_match>`\\"
" \\(text\\, target\\, ratio\\)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1:<autosummary>:1
#: freeports_analysis.formats_utils.text_extract.match.target_prefix_match:1 of
msgid ""
"Check if the normalized prefix of the target string matches the "
"normalized text with a given similarity ratio."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:1 of
msgid ""
"Compute a similarity ratio from the beginning of the two strings. Only "
"matching prefixes are considered."
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:4 of
msgid "first string to compare"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:6 of
msgid "second string to compare"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.prefix_similarity:9 of
msgid "similarity ratio between 0.0 and 1.0"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_fuzzy_match:3 of
msgid "The input text to compare"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_fuzzy_match:5 of
msgid "The target string to compare against"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_fuzzy_match:7 of
msgid "The minimum similarity ratio threshold (0.0 to 1.0)"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_fuzzy_match:10 of
msgid "True if similarity ratio meets or exceeds threshold, False otherwise"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_match:3 of
msgid "The input text to search within"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_match:5 of
msgid "The target string to search for"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_match:8 of
msgid "True if target is found in text after normalization, False otherwise"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_prefix_match:4 of
msgid "The input text to compare against the target prefix"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_prefix_match:6 of
msgid "The target string whose prefix is being matched"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_prefix_match:8 of
msgid "The minimum similarity ratio threshold (0.0 to 1.0) for the prefix match"
msgstr ""

#: freeports_analysis.formats_utils.text_extract.match.target_prefix_match:11
#: of
msgid ""
"True if the normalized prefix similarity meets or exceeds the threshold, "
"False otherwise"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:2
msgid "freeports\\_analysis.main"
msgstr ""

#: freeports_analysis.main:1 of
msgid ""
"This module is the one that contains the function called in order to "
"decode the information from the pdf and to save the `csv` file. This is "
"also the source code to be launched (providing the options with a "
"`dotenv` file or with `env variables`) to mimic the behaviour of the "
"command from commandline (to use the package as a script)."
msgstr ""

#: freeports_analysis.main:7 of
msgid "Example"
msgstr ""

#: freeports_analysis.main:8 of
msgid "```python main.py```"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
msgid ""
":py:obj:`batch_job_confs <freeports_analysis.main.batch_job_confs>`\\ "
"\\(config\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
#: freeports_analysis.main.batch_job_confs:1 of
msgid ""
"Create a list of configurations overwritten after reading a batch file "
"with job contextual options"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
msgid ":py:obj:`get_targets <freeports_analysis.main.get_targets>`\\ \\(\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
#: freeports_analysis.main.get_targets:1 of
msgid "Read target names from a CSV file and return them as a list."
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
msgid ":py:obj:`main <freeports_analysis.main.main>`\\ \\(config\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
#: freeports_analysis.main.main:1 of
msgid ""
"Main function that expect the configuration to be already provided (for "
"example with arguments on command line or with `env variables`)"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
msgid ""
":py:obj:`pipeline_batch <freeports_analysis.main.pipeline_batch>`\\ "
"\\(batch\\_pages\\, i\\_page\\_batch\\, ...\\)"
msgstr ""

#: ../../source/_generated/freeports_analysis.main.rst:16:<autosummary>:1
#: freeports_analysis.main.pipeline_batch:1 of
msgid "Apply the pipeline of actions in order to get data in `csv`"
msgstr ""

#: freeports_analysis.main.NoPDFormatDetected:1:<autosummary>:1 of
msgid ""
":py:obj:`NoPDFormatDetected "
"<freeports_analysis.main.NoPDFormatDetected>`\\"
msgstr ""

#: freeports_analysis.main.NoPDFormatDetected:1
#: freeports_analysis.main.NoPDFormatDetected:1:<autosummary>:1 of
msgid ""
"Exception that should rise when the script is not capable of detecting a "
"PDF format to use to decode the report, and no explicit format is "
"specified"
msgstr ""

#: freeports_analysis.main.batch_job_confs:7 of
msgid "list of configurations"
msgstr ""

#: freeports_analysis.main.get_targets:3 of
msgid ""
"Reads the first column of 'target.csv' (excluding header row) and returns"
" the values as a list of strings. The file is expected to be in the "
"package's data directory."
msgstr ""

#: freeports_analysis.main.get_targets:7 of
msgid "list of target names extracted from the CSV file."
msgstr ""

#: freeports_analysis.main.get_targets:10 of
msgid "If 'target.csv' doesn't exist in the data directory."
msgstr ""

#: freeports_analysis.main.get_targets:11 of
msgid "If the CSV file is empty or malformed."
msgstr ""

#: freeports_analysis.main.main:4 of
msgid ""
"if no explicit format is provided and an url is not provided     or not "
"associated with any format the program cannot choose a way to     decode "
"the pdf, so it raises this exception"
msgstr ""

#: freeports_analysis.main.pipeline_batch:3 of
msgid ""
"`pdf` document to process in the format used in the python package "
"`pymupdf`"
msgstr ""

#: freeports_analysis.main.pipeline_batch:5 of
msgid "the list of relevant companies in the report from which data is relevant"
msgstr ""

#: freeports_analysis.main.pipeline_batch:7 of
msgid "the dictionary containing the functions to use in order to parse the pdf"
msgstr ""

#: freeports_analysis.main.pipeline_batch:10 of
msgid "pandas dataframe with extracted data"
msgstr ""

